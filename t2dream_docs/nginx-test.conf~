user www-data;
worker_processes  auto;
worker_rlimit_nofile 8192;

events {
    worker_connections  2048;
}

http {

    # Use upstream to support keepalive

    upstream test {
        server download.t2depigenome.org;
        keepalive 30;
    }

    upstream production {
        server download.t2depigenome.org;
        keepalive 30;
    }

    resolver 127.0.0.1;
    resolver_timeout 5s;
    include  mime.types;
    client_max_body_size 500m;
    default_type  application/octet-stream;
    keepalive_timeout  65;
    proxy_buffers 8 256k;
    proxy_buffer_size 256k;
    proxy_busy_buffers_size 256k;
    proxy_send_timeout    5m;
    proxy_read_timeout    5m;
    send_timeout    5m;

    merge_slashes off;

    # https://wiki.mozilla.org/Security/Server_Side_TLS
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'HIGH:!aNULL:!MD5';
    ssl_prefer_server_ciphers on;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling off;
    ssl_stapling_verify off;

    log_format combined_stats '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$upstream_http_x_stats&request_time=$request_time" $host';
    access_log /var/log/nginx/access.log combined_stats;

    server {
        listen 443 ssl http2;
        server_name download.t2depigenome.org;
        ssl_certificate         /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key     /etc/nginx/ssl/privkey.pem;
        access_log /var/log/nginx/download.t2depigenome.log combined_stats;
        location = /robots.txt {
            add_header Content-Type text/plain;
            return 200 'User-agent: *\nDisallow: /\n';
        }
        location ~ ^/(https?://(t2depi-files|t2depi-files-dev)\.s3\.amazonaws\.com(:80|:443)?/.*)$ {
            # Clear auth and content-type headers when passing to s3 bucket (SNO-34/ENCD-4007).
            proxy_set_header Authorization "";
            proxy_set_header Content-Type "";
            proxy_buffering off;
            proxy_pass $1$is_args$args;
        }
        location = / {
            return 301 https://www.t2depigenome.org/;
        }
	}
}